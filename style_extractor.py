#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å—Ç–∏–ª–µ–π –∏–∑ PPTX (v16)
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤, —Ç–µ–Ω–µ–π, —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
"""

from pptx.enum.dml import MSO_FILL_TYPE, MSO_LINE_DASH_STYLE
from pptx.dml.color import RGBColor


class StyleExtractor:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å—Ç–∏–ª–µ–π –∏–∑ PPTX"""
    
    @staticmethod
    def emu_to_px(emu):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç EMU –≤ –ø–∏–∫—Å–µ–ª–∏"""
        return emu // 9525 if emu else 0
    
    @staticmethod
    def rgb_to_hex(rgb_color):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç RGBColor –≤ hex"""
        try:
            if hasattr(rgb_color, 'rgb'):
                rgb = rgb_color.rgb
                return f"#{rgb[0]:02x}{rgb[1]:02x}{rgb[2]:02x}"
        except:
            pass
        return None
    
    def extract_fill_style(self, fill):
        """
        –ü–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∑–∞–ª–∏–≤–∫–∏
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: SOLID, GRADIENT, PICTURE
        """
        styles = {}
        
        try:
            fill_type = fill.type
            
            if fill_type == MSO_FILL_TYPE.SOLID:
                # –°–ø–ª–æ—à–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞
                styles.update(self.extract_solid_fill(fill))
            
            elif fill_type == MSO_FILL_TYPE.GRADIENT:
                # –ì—Ä–∞–¥–∏–µ–Ω—Ç
                styles.update(self.extract_gradient_fill(fill))
            
            elif fill_type == MSO_FILL_TYPE.PICTURE:
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
                styles['fill_type'] = 'picture'
            
            elif fill_type == MSO_FILL_TYPE.BACKGROUND:
                # –§–æ–Ω –∏–∑ –º–∞–∫–µ—Ç–∞
                styles['fill_type'] = 'background'
                
        except Exception as e:
            # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            pass
        
        return styles
    
    def extract_solid_fill(self, fill):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–ª–æ—à–Ω—É—é –∑–∞–ª–∏–≤–∫—É"""
        styles = {}
        
        try:
            color = self.rgb_to_hex(fill.fore_color)
            if color:
                styles['background-color'] = color
            
            # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            try:
                if hasattr(fill.fore_color, 'transparency'):
                    transparency = fill.fore_color.transparency
                    if transparency is not None and transparency > 0:
                        opacity = 1.0 - transparency
                        styles['opacity'] = f"{opacity:.2f}"
            except:
                pass
                
        except Exception as e:
            pass
        
        return styles
    
    def extract_gradient_fill(self, fill):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS linear-gradient –∏–ª–∏ radial-gradient
        """
        styles = {}
        
        try:
            # –î–æ—Å—Ç—É–ø –∫ XML —ç–ª–µ–º–µ–Ω—Ç–∞–º –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
            elem = fill._element
            grad_fill = elem.find('.//{http://schemas.openxmlformats.org/drawingml/2006/main}gradFill')
            
            if grad_fill is None:
                return styles
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (color stops)
            stops = []
            gs_list = grad_fill.findall('.//{http://schemas.openxmlformats.org/drawingml/2006/main}gs')
            
            for gs in gs_list:
                # –ü–æ–∑–∏—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (0-100%)
                pos = int(gs.get('pos', 0)) / 1000  # –ò–∑ –ø—Ä–æ–º–∏–ª–µ–π –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                
                # –¶–≤–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                color_elem = gs.find('.//{http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr')
                if color_elem is not None:
                    color_val = color_elem.get('val', '000000')
                    color = f"#{color_val}"
                else:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º schemeClr –∏–ª–∏ –¥—Ä—É–≥–∏–µ
                    scheme_clr = gs.find('.//{http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr')
                    if scheme_clr is not None:
                        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä—ã–π
                        color = "#808080"
                    else:
                        color = "#000000"
                
                stops.append((pos, color))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏
            stops.sort(key=lambda x: x[0])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
            lin = grad_fill.find('.//{http://schemas.openxmlformats.org/drawingml/2006/main}lin')
            path = grad_fill.find('.//{http://schemas.openxmlformats.org/drawingml/2006/main}path')
            
            if lin is not None:
                # –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                angle = int(lin.get('ang', 0)) / 60000  # –ò–∑ 1/60000 –≥—Ä–∞–¥—É—Å–∞ –≤ –≥—Ä–∞–¥—É—Å—ã
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–≥–æ–ª –∏–∑ PowerPoint (0¬∞ = –≤–ø—Ä–∞–≤–æ, –ø–æ —á–∞—Å–æ–≤–æ–π) 
                # –≤ CSS (0¬∞ = –≤–≤–µ—Ä—Ö, –ø–æ —á–∞—Å–æ–≤–æ–π)
                css_angle = (angle + 90) % 360
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º CSS
                stop_strs = [f"{color} {pos:.1f}%" for pos, color in stops]
                gradient = f"linear-gradient({css_angle}deg, {', '.join(stop_strs)})"
                
                styles['background'] = gradient
                print(f"         ‚ú® –ì—Ä–∞–¥–∏–µ–Ω—Ç LINEAR {css_angle}¬∞ —Å {len(stops)} –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏")
            
            elif path is not None:
                # –†–∞–¥–∏–∞–ª—å–Ω—ã–π –∏–ª–∏ path –≥—Ä–∞–¥–∏–µ–Ω—Ç
                path_type = path.get('path', 'shape')
                
                if path_type == 'circle':
                    # –†–∞–¥–∏–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                    stop_strs = [f"{color} {pos:.1f}%" for pos, color in stops]
                    gradient = f"radial-gradient(circle, {', '.join(stop_strs)})"
                    
                    styles['background'] = gradient
                    print(f"         ‚ú® –ì—Ä–∞–¥–∏–µ–Ω—Ç RADIAL —Å {len(stops)} –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏")
                else:
                    # Path/shape - –∏—Å–ø–æ–ª—å–∑—É–µ–º radial –∫–∞–∫ approximation
                    stop_strs = [f"{color} {pos:.1f}%" for pos, color in stops]
                    gradient = f"radial-gradient(ellipse, {', '.join(stop_strs)})"
                    
                    styles['background'] = gradient
                    print(f"         ‚ú® –ì—Ä–∞–¥–∏–µ–Ω—Ç PATH/SHAPE —Å {len(stops)} –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏")
            
            else:
                # Fallback: –ø—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                if stops:
                    stop_strs = [f"{color} {pos:.1f}%" for pos, color in stops]
                    gradient = f"linear-gradient(180deg, {', '.join(stop_strs)})"
                    styles['background'] = gradient
                    print(f"         ‚ú® –ì—Ä–∞–¥–∏–µ–Ω—Ç FALLBACK —Å {len(stops)} –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏")
        
        except Exception as e:
            print(f"         ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞: {e}")
        
        return styles
    
    def extract_line_style(self, line):
        """
        –ü–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –ª–∏–Ω–∏–∏/–≥—Ä–∞–Ω–∏—Ü—ã
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: —Ç–æ–ª—â–∏–Ω—É, —Ü–≤–µ—Ç, —Å—Ç–∏–ª—å (solid, dashed, dotted)
        
        –í–ê–ñ–ù–û: –ì—Ä–∞–Ω–∏—Ü—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏:
        1. line.fill.type != None (–≥—Ä–∞–Ω–∏—Ü–∞ –≤–∫–ª—é—á–µ–Ω–∞)
        2. line.width > 0 (—Ç–æ–ª—â–∏–Ω–∞ –±–æ–ª—å—à–µ 0)
        """
        styles = {}
        
        try:
            if not line:
                return styles
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä–∞–Ω–∏—Ü–∞ –≤–æ–æ–±—â–µ –≤–∫–ª—é—á–µ–Ω–∞
            if not hasattr(line, 'fill') or line.fill is None:
                return styles
            
            fill_type = line.fill.type
            
            # –ï—Å–ª–∏ fill.type is None –∏–ª–∏ 0 (–Ω–µ—Ç –∑–∞–ª–∏–≤–∫–∏) - –≥—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç
            if fill_type is None or fill_type == 0:
                return styles
            
            # –¢–æ–ª—â–∏–Ω–∞
            if not hasattr(line, 'width') or not line.width:
                return styles
            
            width_px = self.emu_to_px(line.width)
            
            # –ï—Å–ª–∏ —Ç–æ–ª—â–∏–Ω–∞ –º–µ–Ω—å—à–µ 1px - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—É
            if width_px < 1:
                return styles
            
            styles['border-width'] = f"{width_px}px"
            
            # –¶–≤–µ—Ç
            try:
                if hasattr(line.fill, 'fore_color') and line.fill.fore_color:
                    color = self.rgb_to_hex(line.fill.fore_color)
                    if color:
                        styles['border-color'] = color
            except:
                pass
            
            # –°—Ç–∏–ª—å –ª–∏–Ω–∏–∏
            if hasattr(line, 'dash_style'):
                dash = line.dash_style
                
                if dash == MSO_LINE_DASH_STYLE.SOLID or dash is None:
                    styles['border-style'] = 'solid'
                elif dash == MSO_LINE_DASH_STYLE.DASH:
                    styles['border-style'] = 'dashed'
                    print(f"         üìè –ì—Ä–∞–Ω–∏—Ü–∞: DASHED {width_px}px")
                elif dash == MSO_LINE_DASH_STYLE.DOT:
                    styles['border-style'] = 'dotted'
                    print(f"         üìè –ì—Ä–∞–Ω–∏—Ü–∞: DOTTED {width_px}px")
                elif dash == MSO_LINE_DASH_STYLE.DASH_DOT:
                    # CSS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç dash-dot, –∏—Å–ø–æ–ª—å–∑—É–µ–º dashed
                    styles['border-style'] = 'dashed'
                    print(f"         üìè –ì—Ä–∞–Ω–∏—Ü–∞: DASH-DOT {width_px}px")
                elif dash == MSO_LINE_DASH_STYLE.LONG_DASH:
                    styles['border-style'] = 'dashed'
                    print(f"         üìè –ì—Ä–∞–Ω–∏—Ü–∞: LONG-DASH {width_px}px")
                else:
                    styles['border-style'] = 'solid'
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é solid
                styles['border-style'] = 'solid'
            
            # –ï—Å–ª–∏ –≥—Ä–∞–Ω–∏—Ü–∞ –≤–∞–ª–∏–¥–Ω–∞ - –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if styles:
                print(f"         üìè –ì—Ä–∞–Ω–∏—Ü–∞: {styles.get('border-style', 'solid')} {width_px}px {styles.get('border-color', '')}")
                
        except Exception as e:
            pass
        
        return styles
    
    def extract_shadow_effect(self, shape):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Ç–µ–Ω–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS box-shadow
        
        –í–ê–ñ–ù–û: –¢–µ–Ω—å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        styles = {}
        
        try:
            elem = shape._element
            sp_pr = elem.find('.//{http://schemas.openxmlformats.org/presentationml/2006/main}spPr')
            
            if sp_pr is None:
                return styles
            
            effect_lst = sp_pr.find('.//{http://schemas.openxmlformats.org/drawingml/2006/main}effectLst')
            if effect_lst is None:
                return styles
            
            # –í–Ω–µ—à–Ω—è—è —Ç–µ–Ω—å
            outer_shdw = effect_lst.find('.//{http://schemas.openxmlformats.org/drawingml/2006/main}outerShdw')
            if outer_shdw is None:
                return styles
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–Ω–∏
            blur_emu = int(outer_shdw.get('blurRad', 0))
            dist_emu = int(outer_shdw.get('dist', 0))
            dir_angle = int(outer_shdw.get('dir', 0)) / 60000  # –í –≥—Ä–∞–¥—É—Å—ã
            
            blur = blur_emu // 9525
            dist = dist_emu // 9525
            
            # –ï—Å–ª–∏ —Ä–∞–∑–º—ã—Ç–∏–µ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω—É–ª–µ–≤—ã–µ - —Ç–µ–Ω—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if blur == 0 and dist == 0:
                return styles
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –ø–æ x –∏ y
            import math
            # PowerPoint: 0¬∞ = –≤–ø—Ä–∞–≤–æ, –ø–æ —á–∞—Å–æ–≤–æ–π
            # CSS: –Ω—É–∂–Ω—ã offset-x –∏ offset-y
            angle_rad = math.radians(dir_angle)
            offset_x = int(dist * math.cos(angle_rad))
            offset_y = int(dist * math.sin(angle_rad))
            
            # –¶–≤–µ—Ç —Ç–µ–Ω–∏
            color_elem = outer_shdw.find('.//{http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr')
            if color_elem is not None:
                color_val = color_elem.get('val', '000000')
                color = f"#{color_val}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                alpha_elem = color_elem.find('.//{http://schemas.openxmlformats.org/drawingml/2006/main}alpha')
                if alpha_elem is not None:
                    alpha_val = int(alpha_elem.get('val', 100000)) / 100000
                    if alpha_val < 0.1:  # –ü–æ—á—Ç–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Ç–µ–Ω—å - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                        return styles
            else:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Ü–≤–µ—Ç–∞
                scheme_clr = outer_shdw.find('.//{http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr')
                if scheme_clr is not None:
                    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π
                    color = "#333333"
                else:
                    color = "#000000"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º box-shadow
            shadow = f"{offset_x}px {offset_y}px {blur}px {color}"
            styles['box-shadow'] = shadow
            print(f"         üåë –¢–µ–Ω—å: offset=({offset_x},{offset_y}) blur={blur}px color={color}")
        
        except Exception as e:
            pass
        
        return styles
    
    def extract_transform_style(self, shape):
        """
        –ü–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: rotation, flip horizontal/vertical
        """
        styles = {}
        transforms = []
        
        try:
            # –ü–æ–≤–æ—Ä–æ—Ç
            if hasattr(shape, 'rotation') and shape.rotation != 0:
                transforms.append(f"rotate({shape.rotation}deg)")
                print(f"         üîÑ –ü–æ–≤–æ—Ä–æ—Ç: {shape.rotation}¬∞")
            
            # –û—Ç—Ä–∞–∂–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ XML)
            elem = shape._element
            xfrm = elem.find('.//{http://schemas.openxmlformats.org/presentationml/2006/main}xfrm')
            
            if xfrm is None:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø—É—Ç—å –¥–ª—è –≥—Ä—É–ø–ø –∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
                xfrm = elem.find('.//{http://schemas.openxmlformats.org/drawingml/2006/main}xfrm')
            
            if xfrm is not None:
                flip_h = xfrm.get('flipH')
                flip_v = xfrm.get('flipV')
                
                if flip_h == '1':
                    transforms.append("scaleX(-1)")
                    print(f"         ‚ÜîÔ∏è –û—Ç—Ä–∞–∂–µ–Ω–∏–µ: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ")
                
                if flip_v == '1':
                    transforms.append("scaleY(-1)")
                    print(f"         ‚ÜïÔ∏è –û—Ç—Ä–∞–∂–µ–Ω–∏–µ: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if transforms:
                styles['transform'] = ' '.join(transforms)
                styles['transform-origin'] = 'center center'
        
        except Exception as e:
            pass
        
        return styles


# Singleton instance
style_extractor = StyleExtractor()
