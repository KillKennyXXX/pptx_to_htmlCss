"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–∞–π–¥–∞
"""

from pptx import Presentation
from pptx.enum.shapes import MSO_SHAPE_TYPE
import sys

def diagnose_slide(pptx_path, slide_num):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–∞–π–¥–∞"""
    
    print(f"\n{'='*60}")
    print(f"–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–õ–ê–ô–î–ê {slide_num}")
    print(f"{'='*60}\n")
    
    prs = Presentation(pptx_path)
    
    if slide_num > len(prs.slides):
        print(f"–û—à–∏–±–∫–∞: —Å–ª–∞–π–¥ {slide_num} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–≤—Å–µ–≥–æ {len(prs.slides)} —Å–ª–∞–π–¥–æ–≤)")
        return
    
    slide = prs.slides[slide_num - 1]
    
    # –†–∞–∑–º–µ—Ä—ã —Å–ª–∞–π–¥–∞
    slide_width = prs.slide_width / 914400  # EMU to inches
    slide_height = prs.slide_height / 914400
    print(f"üìè –†–∞–∑–º–µ—Ä—ã —Å–ª–∞–π–¥–∞: {slide_width:.2f}\" x {slide_height:.2f}\"")
    print(f"   –í –ø–∏–∫—Å–µ–ª—è—Ö: {int(prs.slide_width/12700)} x {int(prs.slide_height/12700)} px\n")
    
    # –§–æ–Ω
    print("üé® –§–û–ù –°–õ–ê–ô–î–ê:")
    try:
        if hasattr(slide.background, 'fill'):
            fill = slide.background.fill
            print(f"   –¢–∏–ø –∑–∞–ª–∏–≤–∫–∏: {fill.type} ({type(fill.type)})")
            
            if fill.type == 1:  # SOLID
                print("   ‚Üí –°–ø–ª–æ—à–Ω–æ–π —Ü–≤–µ—Ç")
            elif fill.type == 6:  # PICTURE
                print("   ‚Üí –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï!")
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ XML
                bg_element = slide.background._element
                print(f"   XML —ç–ª–µ–º–µ–Ω—Ç: {bg_element.tag}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º relationships
                print(f"\n   Relationships —Å–ª–∞–π–¥–∞:")
                for rel_id, rel in slide.part.rels.items():
                    if 'image' in rel.reltype.lower():
                        print(f"      {rel_id}: {rel.target_ref} ({rel.reltype})")
            else:
                print(f"   ‚Üí –î—Ä—É–≥–æ–π —Ç–∏–ø: {fill.type}")
        else:
            print("   –ù–µ—Ç –∑–∞–ª–∏–≤–∫–∏")
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä
    print(f"\nüì¶ –§–ò–ì–£–†–´ –ù–ê –°–õ–ê–ô–î–ï (–≤—Å–µ–≥–æ: {len(slide.shapes)}):\n")
    
    shape_types_count = {}
    
    def analyze_shape(shape, level=0):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∏–≥—É—Ä—ã"""
        indent = "  " * level
        
        # –¢–∏–ø —Ñ–∏–≥—É—Ä—ã
        shape_type = shape.shape_type
        type_name = str(shape_type).split('.')[-1].replace('(', '').replace(')', '')
        
        if shape_type not in shape_types_count:
            shape_types_count[shape_type] = 0
        shape_types_count[shape_type] += 1
        
        # –ü–æ–∑–∏—Ü–∏—è –∏ —Ä–∞–∑–º–µ—Ä
        try:
            left = shape.left / 914400  # EMU to inches
            top = shape.top / 914400
            width = shape.width / 914400
            height = shape.height / 914400
            pos_info = f"[{left:.1f}\", {top:.1f}\"] {width:.1f}\"x{height:.1f}\""
        except:
            pos_info = "[–Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏]"
        
        # –¢–µ–∫—Å—Ç
        text_info = ""
        if hasattr(shape, 'text') and shape.text:
            text_preview = shape.text[:30].replace('\n', ' ')
            if len(shape.text) > 30:
                text_preview += "..."
            text_info = f" | –¢–µ–∫—Å—Ç: '{text_preview}'"
        
        # –ò–º—è —Ñ–∏–≥—É—Ä—ã
        name_info = ""
        if hasattr(shape, 'name'):
            name_info = f" | –ò–º—è: {shape.name}"
        
        print(f"{indent}‚Ä¢ {type_name:20} {pos_info:25}{name_info}{text_info}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞
        if shape_type == MSO_SHAPE_TYPE.PICTURE:
            try:
                img = shape.image
                print(f"{indent}  ‚îî‚îÄ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img.ext} ({len(img.blob)} –±–∞–π—Ç)")
            except Exception as e:
                print(f"{indent}  ‚îî‚îÄ ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
        if shape_type == MSO_SHAPE_TYPE.GROUP:
            print(f"{indent}  ‚îî‚îÄ –ì—Ä—É–ø–ø–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(shape.shapes)} —Ñ–∏–≥—É—Ä:")
            for sub_shape in shape.shapes:
                analyze_shape(sub_shape, level + 2)
        
        # –ï—Å–ª–∏ —ç—Ç–æ FREEFORM - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ª–∏–≤–∫—É
        if shape_type == MSO_SHAPE_TYPE.FREEFORM:
            try:
                if hasattr(shape, 'fill'):
                    fill_type = shape.fill.type
                    print(f"{indent}  ‚îî‚îÄ –ó–∞–ª–∏–≤–∫–∞: —Ç–∏–ø {fill_type} ({type(fill_type)})")
                    if fill_type == 6:  # PICTURE
                        print(f"{indent}      ‚ö†Ô∏è FREEFORM —Å –∑–∞–ª–∏–≤–∫–æ–π-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º!")
            except Exception as e:
                print(f"{indent}  ‚îî‚îÄ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ª–∏–≤–∫–∏: {e}")
    
    for i, shape in enumerate(slide.shapes, 1):
        print(f"\n[{i}]")
        analyze_shape(shape, 1)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ñ–∏–≥—É—Ä: {len(slide.shapes)}")
    print(f"\n   –ü–æ —Ç–∏–ø–∞–º:")
    for shape_type, count in sorted(shape_types_count.items(), key=lambda x: x[1], reverse=True):
        type_name = str(shape_type).split('.')[-1].replace('(', '').replace(')', '')
        print(f"      {type_name:20} x {count}")
    
    # –ò—â–µ–º —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print(f"\n\nüîç –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
    images = []
    
    def collect_images(shape):
        if shape.shape_type == MSO_SHAPE_TYPE.PICTURE:
            try:
                area = shape.width * shape.height
                images.append({
                    'shape': shape,
                    'area': area,
                    'width': shape.width / 914400,
                    'height': shape.height / 914400
                })
            except:
                pass
        elif shape.shape_type == MSO_SHAPE_TYPE.GROUP:
            for sub in shape.shapes:
                collect_images(sub)
    
    for shape in slide.shapes:
        collect_images(shape)
    
    if images:
        slide_area = prs.slide_width * prs.slide_height
        images_sorted = sorted(images, key=lambda x: x['area'], reverse=True)
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
        print(f"\n   –°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ:")
        for i, img in enumerate(images_sorted[:5], 1):
            percent = (img['area'] / slide_area) * 100
            print(f"      {i}. {img['width']:.1f}\" x {img['height']:.1f}\" (–∑–∞–Ω–∏–º–∞–µ—Ç {percent:.1f}% —Å–ª–∞–π–¥–∞)")
    else:
        print("   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print(f"\n{'='*60}\n")

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python diagnose_slide.py <—Ñ–∞–π–ª.pptx> <–Ω–æ–º–µ—Ä_—Å–ª–∞–π–¥–∞>")
        sys.exit(1)
    
    pptx_path = sys.argv[1]
    slide_num = int(sys.argv[2])
    
    diagnose_slide(pptx_path, slide_num)
